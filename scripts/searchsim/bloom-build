#!/usr/bin/perl -w

#
# bloom-build:
#
# A simple tool for building, reading and writing Bloom filter-based
# indexes for sets of DNA sequences.
#

use strict;
use warnings;
use Carp;
use FindBin qw($Bin);
use lib $Bin;
use BloomIndex;
use Getopt::Long;
Getopt::Long::Configure ("pass_through");

my @optnames = (
	"k=i",
	"m=i",
	"len=i",
	"freq=i",
	"to-file=s",
	"from-file=s",
	"debug",
	"n=i",
	"e=f"
);
my %opts = ();
GetOptions (\%opts, @optnames) || die "One or more bad options (see above)\n";

(defined($opts{k}) && defined($opts{m})) || croak("Must specify -m and -k");
$opts{len} = 22 unless defined($opts{len});
$opts{freq} = 1 unless defined($opts{freq});

##
# Given a list of filehandles, index them.
#
sub indexFhs {
	my ($bloom, $len, $freq, $close, $fhs) = @_;
	my ($ents, $dups) = (0, 0);
	my $LARGE_BUF = 100000;
	my $totlen = 0;
	my $totseqs = 0;
	for my $fh (@$fhs) {
		my $buf = "";
		my $off = 0;
		while(<$fh>) {
			if(/^>/) {
				$totseqs++;
				next;
			}
			chomp;
			my $llen = length($_);
			$totlen += $llen;
			$buf .= $_;
			for(my $i = $len + $llen - 1; $i >= $len; $i--) {
				if(++$off == $freq) {
					$off = 0;
					# continue
				} else {
					next;
				}
				next if length($buf) < $i;
				my $str = substr($buf, -$i, $len);
				$ents++;
				$dups += $bloom->add($str);
			}
			$buf = substr($buf, -$len) if length($buf) > $LARGE_BUF;
		}
		close($fh) if $close;
	}
	return ($totlen, $totseqs, $ents, $dups);
}

my $bloom;

if(defined($opts{"from-file"})) {
	$bloom = new Bloom::Faster($opts{"from-file"});
} else {
	# Compile the array of filehandles
	my @fhs = ();
	for my $f (@ARGV) {
		my $fh;
		my $fcmd = $f =~ /\.gz$/ ? "gzip -dc $f |" : $f;
		open($fh, $fcmd) || croak("Could not open \"$f\"\n");
		push @fhs, $fh;
	}
	
	# Create the bloom
	$bloom = new Bloom::Faster({ k => $opts{k}, m => $opts{m} });

	# Index the fasta files
	my ($totlen, $totseqs, $ents, $dups) =
		indexFhs($bloom, $opts{len}, $opts{freq}, 1, \@fhs);
	
	printf STDERR "$totlen bases read from $totseqs sequences in ".scalar(@fhs)." input files\n";
	printf STDERR "Added $ents Bloom entries, $dups (%.5f%%) of which were duplicates\n", $dups*100.0/($ents || 1);
}

# Dump to file if requested
if(defined($opts{"to-file"})) {
	my $f = $opts{"to-file"};
	$bloom->to_file($f);
	-f $f || croak("Didn't write file $f");
	print STDERR "Wrote ".(-s $f)." bytes to $f\n";
}
